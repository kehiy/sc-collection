#include "imports/stdlib.fc"; ;; including standard library.

{-
    `load_data` loads an int variable for us from contract storage.
     We limit the size to 64 bits to optimize costs.
-}
(int) load_data() inline {
    var ds = get_data().begin_parse();
    return (ds~load_uint(64));
}

{-
    `save_data` save our new value of the variable.
-}
() save_data(int counter) impure inline {
    set_data(begin_cell()
    .store_uint(counter, 64)
    .end_cell());
}

{-
    This function will process any incoming message from other contracts. (such as wallet contracts)
    Also similar function called `recv_external` help us to process external calls which we don't need here.
-}
() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return (); ;; ignoring empty messages (such as sending coing with no messages) and resturning.
    }

    int op = in_msg_body~load_uint(32); ;; loading message body into a 32 bit uint.

    if (op == 1) { ;; checking if operation is set to 1. (we can use any identifier)
        var (counter) = load_data(); ;; loading conunter variable.
        save_data(counter + 1); ;; doing increment action and  saving new variable.
    }
}

{-
    `counter` function is a getter that just returns our current value of counter variable.
-}
int counter() method_id {
    var (counter) = load_data();
    return counter;
}
